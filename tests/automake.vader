Include: include/setup.vader

Execute (Setup):
  function! NeomakeTestsAssertAutomakeAutocommands(events) abort
    let expected = ['neomake_automake  BufWipeout:     *         call s:neomake_automake_clean(expand(''<abuf>''))']
    for e in a:events
      call add(expected, 'neomake_automake  '.e.':     *         call s:neomake_automake('''.e.''', expand(''<abuf>''))')
    endfor

    let output = split(neomake#utils#redir('au neomake_automake'), "\n")[1:-1]
    let sort_output = []
    for i in range(1, len(output), 2)
      let sort_output += [output[i-1].': '.output[i]]
    endfor
    AssertEqual join(sort(expected), "\n"), join(sort(sort_output), "\n")
  endfunction

Execute (short setup: 'n'):
  Save g:neomake
  call neomake#configure#automake('n')
  if exists('##TextChanged')
    let event = 'TextChanged'
  else
    let event = 'CursorHold'
    AssertNeomakeMessage 'automake: Using CursorHold instead of TextChanged', 3
    Assert exists('#neomake_automake'), 1
    Assert !exists('#neomake_automake_buffer'), 2
  endif
  call NeomakeTestsAssertAutomakeAutocommands(['InsertLeave', event])

Execute (short setup: 'i'):
  Save g:neomake
  call neomake#configure#automake('i')
  if exists('##TextChangedI')
    let event = 'TextChangedI'
  else
    let event = 'CursorHoldI'
    AssertNeomakeMessage 'automake: Using CursorHoldI instead of TextChangedI', 3
    Assert exists('#neomake_automake'), 1
    Assert !exists('#neomake_automake_buffer'), 2
  endif
  call NeomakeTestsAssertAutomakeAutocommands([event])

Execute (short setup: 'w'):
  Save g:neomake
  call neomake#configure#automake('w')
  call NeomakeTestsAssertAutomakeAutocommands(['BufWritePost'])
  if has('timers')
    AssertEqual g:neomake, {'automake_events': {'BufWritePost': {'delay': 0}}}
  else
    AssertEqual g:neomake, {'automake_events': {'BufWritePost': {}}}
  endif

Execute (short setup: 'w' with delay):
  Save g:neomake
  call neomake#configure#automake('w', 100)
  call NeomakeTestsAssertAutomakeAutocommands(['BufWritePost'])
  if has('timers')
    AssertEqual g:neomake, {'automake_events':
    \ {'BufWritePost': {'delay': 0}}, 'automake_delay': 100}
  else
    AssertEqual g:neomake, {'automake_events':
    \ {'BufWritePost': {}}, 'automake_delay': 0}
  endif

Execute (short setup: 'r'):
  Save g:neomake
  call neomake#configure#automake('r')
  call NeomakeTestsAssertAutomakeAutocommands(['BufWinEnter', 'FileChangedShellPost', 'FileType'])

Execute (setup: short vs. long):
  Save g:neomake
  call neomake#configure#automake('w', 500)
  let short_config = copy(g:neomake)
  unlet g:neomake
  call neomake#configure#automake({
  \ 'BufWritePost': has('timers') ? {'delay': 0} : {},
  \ }, 500)
  Log g:neomake
  AssertEqual short_config, g:neomake

  " TODO: sync with doc"
  unlet g:neomake
  call neomake#configure#automake('nrw', 500)
  let short_config = copy(g:neomake)
  Log "======== 1"
  Log short_config

  unlet g:neomake
  if exists('#TextChanged')
    call neomake#configure#automake({
    \ 'TextChanged': {},
    \ 'InsertLeave': {},
    \ 'FileType': {},
    \ 'FileChangedShellPost': {},
    \ 'BufWritePost': {'delay': 0},
    \ 'BufWinEnter': {},
    \ }, 500)
  else
    call neomake#configure#automake({
    \ 'CursorHold': {},
    \ 'FileType': {},
    \ 'FileChangedShellPost': {},
    \ 'InsertLeave': {},
    \ 'BufWritePost': {},
    \ 'BufWinEnter': {},
    \ }, 0)
  endif
  Log "======== 2"
  Log g:neomake
  AssertEqual short_config, g:neomake

Execute (Automake supports custom buffer config):
  Save g:neomake

  new
  set filetype=neomake_tests
  Save g:neomake_test_enabledmakers
  let g:neomake_test_enabledmakers = [g:entry_maker]
  call g:NeomakeSetupAutocmdWrappers()

  call neomake#configure#automake_for_buffer({
  \ 'CursorHold': {'delay': 0}})
  call neomake#configure#automake({
  \ 'BufWinEnter': {'delay': 0}})

  AssertEqual b:neomake.automake_events, {'CursorHold': {'delay': 0}}
  AssertNeomakeMessage 'automake: registered events: BufWinEnter, CursorHold'

  Log "BufWinEnter"
  doautocmd BufWinEnter
  AssertEqual g:neomake_test_finished, []
  Log "CursorHold"
  doautocmd CursorHold
  AssertEqual len(g:neomake_test_finished), 1

  unlet b:neomake.automake_events
  Log "BufWinEnter"
  doautocmd BufWinEnter
  AssertEqual len(g:neomake_test_finished), 1
  AssertNeomakeMessage 'automake: buffer was not changed', 3
  unlet b:neomake_automake_tick
  doautocmd BufWinEnter
  AssertEqual len(g:neomake_test_finished), 2

  bwipe
  au! neomake_automake

Execute (Automake config via dict):
  Save g:neomake

  call neomake#configure#automake({
  \ 'BufWinEnter': {'delay': 200},
  \ 'TextChanged': {'delay': 200}})

  Log string(b:)
  let expected = {'automake_events': {}}
  if has('timers')
    let expected.automake_events.BufWinEnter = {'delay': 200}
  else
    AssertNeomakeMessage 'automake: timer support is required for automaking, removing event BufWinEnter.'
  endif
  if exists('##TextChanged')
    let expected.automake_events.TextChanged = {'delay': 200}
  else
    AssertNeomakeMessage 'automake: event TextChanged does not exist.', 0
  endif
  Log string(b:)
  AssertEqual g:neomake, expected
  au! neomake_automake

Execute (Error with unsupported events):
  Save g:neomake

  call neomake#configure#automake({
  \ 'EventDoesNotExist': {'delay': 10}})
  AssertNeomakeMessage 'automake: event EventDoesNotExist does not exist.', 0

Execute (Automake):
  Save g:neomake

  call g:NeomakeSetupAutocmdWrappers()

  call neomake#configure#automake('n', 10)
  if !exists('##TextChanged')
    let event = 'CursorHold'
  else
    let event = 'TextChanged'
  endif

  if 1
    AssertEqual &buftype, 'nofile'
"     AssertNeomakeMessage 'automake: skipping setup for buftype=nofile (bufnr='.bufnr('%').', Init)'
    new
    let b:neomake_tempfile_enabled = 1
    setfiletype neomake_tests
    Save g:neomake_test_enabledmakers
    let g:neomake_test_enabledmakers = ['true']
    Log 'insert'
    normal! iline1
"     normal! oline2

    " InsertLeave triggered it already.
"     exe 'doautocmd' event
    NeomakeTestsWaitForNextFinishedJob
"     Log neomake#utils#redir('au neomake_automake_buffer BufWritePost')
    Log 1
    AssertEqual len(g:neomake_test_jobfinished), 1
    Log 2

    " Should not run without changes to the buffer.
    exe 'doautocmd' event
    sleep 50m
    Log 2
    AssertEqual len(g:neomake_test_jobfinished), 1

    " Should run with changes to the buffer.
    norm oline2
    exe 'doautocmd' event
    sleep 50m
    AssertEqual len(g:neomake_test_jobfinished), 2

    Log "===================="
    norm oline4
    if has('timers')
      AssertEqual len(g:neomake_test_jobfinished), 2
      exe 'doautocmd' event
      AssertEqual len(g:neomake_test_jobfinished), 2
      sleep 50m
    else
      AssertEqual len(g:neomake_test_jobfinished), 3
    endif

    AssertEqual len(g:neomake_test_jobfinished), 3

    new
    exe 'doautocmd' event
    sleep 50m
    AssertNeomakeMessage 'automake: no enabled makers (ft=)'

    exe 'doautocmd' event
    let b:neomake_automake_enabled_makers = ['foo']
    let b:neomake = {'automake': {'enabled_makers': ['configured_maker']}}
    sleep 50m
    let bufnr = bufnr('%')
    AssertNeomakeMessage 'automake: buffer was not changed', 3,
    \ {'bufnr': bufnr}

    call neomake#configure#automake('nw')
    normal! ifoo
    let tmpfile = tempname()
    exe 'write' tmpfile
    Log neomake#utils#redir('au neomake_automake')
    Log b:neomake
    AssertNeomakeMessage 'Maker not found (for empty filetype): configured_maker'
    AssertNeomakeMessage 'Nothing to make: no valid makers.'
    NeomakeTestsWaitForFinishedJobs

    bwipe!
    bwipe!
"     au! neomake_automake_buffer
  endif
  au! neomake_automake

Execute (Automake: skips non-default buftypes):
  Save g:neomake

  call neomake#configure#automake('n', 10)
  if !exists('##TextChanged')
    AssertNeomakeMessage 'automake: Using CursorHold instead of TextChanged', 3
    let event = 'CursorHold'
  else
    let event = 'TextChanged'
  endif
    Assert exists('#neomake_automake')
"     Assert exists('#neomake_automake_buffer')
  if 1
    new
    setfiletype neomake_tests
    Save g:neomake_test_enabledmakers
    let g:neomake_test_enabledmakers = ['true']
    set buftype=nofile

    call g:NeomakeSetupAutocmdWrappers()

    if exists('##TextChanged')
      doautocmd TextChanged
      sleep 50m
    else
      doautocmd CursorHold
    endif
    AssertEqual len(g:neomake_test_jobfinished), 0
    bwipe!
"     au! neomake_automake_buffer
  endif
  au! neomake_automake

Execute (neomake#configure#automake_for_buffer sets up autocommands always):
  new
  set buftype=nofile
  call neomake#configure#automake_for_buffer('n', 10)
  if exists('##TextChanged')
    let event = 'TextChanged'
  else
    AssertNeomakeMessage 'automake: Using CursorHold instead of TextChanged', 3
    let event = 'CursorHold'
  endif
  call NeomakeTestsAssertAutomakeAutocommands(['InsertLeave', event])
  bwipe
  au! neomake_automake

Execute (neomake#configure#automake_for_buffer sets up BufWritePost without delay):
  new
  set buftype=nofile
  call neomake#configure#automake_for_buffer('w')
  call NeomakeTestsAssertAutomakeAutocommands(['BufWritePost'])
  if has('timers')
    AssertEqual b:neomake, {'automake_events': {'BufWritePost': {'delay': 0}}}
  else
    AssertEqual b:neomake, {'automake_events': {'BufWritePost': {}}}
  endif
  bwipe
  au! neomake_automake

Execute (neomake#configure#automake_for_buffer sets up BufWritePost with delay):
  new
  set buftype=nofile
  call neomake#configure#automake_for_buffer('w', 5)
  call NeomakeTestsAssertAutomakeAutocommands(['BufWritePost'])
  if has('timers')
    AssertEqual b:neomake, {'automake_events':
    \ {'BufWritePost': {'delay': 0}}, 'automake_delay': 5}
  else
    AssertNeomakeMessage 'automake: timer support is required for delayed events', 1
    AssertEqual b:neomake, {'automake_events':
    \ {'BufWritePost': {}}, 'automake_delay': 0}
  endif

  exe 'w' tempname()
  AssertNeomakeMessage 'automake: ignoring BufWritePost for buftype=nofile'

  set buftype=
  exe 'w' tempname()
  sleep 10m
  AssertNeomakeMessage 'automake: automake for event BufWritePost'
  AssertNeomakeMessage '\mautomake: no enabled makers (ft=)', 3
  bwipe
  au! neomake_automake

Execute (neomake#configure#automake_for_buffer skips non-default buftypes):
  tabnew
  let bufnr = bufnr('%')
  set buftype=nofile
  call neomake#configure#automake('r', 0)
  AssertNeomakeMessage 'automake: registered events: FileChangedShellPost, FileType, BufWinEnter', 3

  bwipe
  au! neomake_automake

Execute (Automake handles unchanged buffer):
  " XXX: run for all?!
  if !has('timers')
    NeomakeTestsSkip 'Only with timers feature'
  else
    call g:NeomakeSetupAutocmdWrappers()
    call neomake#configure#automake({
    \ 'TextChanged': {'delay': 10}})
    new
    set filetype=neomake_tests
    let g:neomake_test_enabledmakers = [g:sleep_maker]
    doautocmd TextChanged
    let make_id = neomake#GetStatus().last_make_id
    NeomakeTestsWaitForMessage '\vautomake: callback for timer \d+'
    doautocmd TextChanged
    NeomakeTestsWaitForFinishedJobs
    AssertNeomakeMessage 'automake: buffer was not changed'

    AssertEqual len(g:neomake_test_finished), 1
    AssertEqual len(g:neomake_test_jobfinished), 1
    bwipe
    au! neomake_automake
  endif

Execute (BufWritePost does not run for unchanged buffer):
  call g:NeomakeSetupAutocmdWrappers()

  Save g:neomake
  call neomake#configure#automake('w')

  new
  set filetype=neomake_tests
  let b:neomake_test_enabledmakers = ['true']
  exe 'w' tempname()
  NeomakeTestsWaitForFinishedJobs
  AssertEqual len(g:neomake_test_jobfinished), 1

  w
  NeomakeTestsWaitForFinishedJobs
  AssertEqual len(g:neomake_test_jobfinished), 1
  AssertNeomakeMessage 'automake: buffer was not changed'

  normal! ifoo
  w
  NeomakeTestsWaitForFinishedJobs
  AssertEqual len(g:neomake_test_jobfinished), 2

  w
  NeomakeTestsWaitForFinishedJobs
  AssertEqual len(g:neomake_test_jobfinished), 2
  AssertNeomakeMessage 'automake: buffer was not changed'

  normal! oline2
  call neomake#Make(1, [])
  NeomakeTestsWaitForFinishedJobs
  AssertEqual len(g:neomake_test_jobfinished), 3

  w
  NeomakeTestsWaitForFinishedJobs
  AssertEqual len(g:neomake_test_jobfinished), 3

  bwipe

Execute (BufWritePost does not run for unchanged buffer (delayed)):
  call g:NeomakeSetupAutocmdWrappers()

  Save g:neomake
  call neomake#configure#automake({'BufWritePost': {'delay': 5}})
  if !has('timers')
    AssertNeomakeMessage 'automake: timer support is required for automaking, removing event BufWritePost.', 0
  else
    new
    set filetype=neomake_tests
    let b:neomake_test_enabledmakers = ['true']
    exe 'w' tempname()
    AssertNeomakeMessage '\vautomake: started timer \(5ms\): (\d+)'
    sleep 10m
    NeomakeTestsWaitForFinishedJobs
    AssertEqual len(g:neomake_test_jobfinished), 1

    w
    NeomakeTestsWaitForFinishedJobs
    AssertEqual len(g:neomake_test_jobfinished), 1
    AssertNeomakeMessage 'automake: buffer was not changed'

    normal! ifoo
    w
    sleep 10m
    NeomakeTestsWaitForFinishedJobs
    AssertEqual len(g:neomake_test_jobfinished), 2

    w
    NeomakeTestsWaitForFinishedJobs
    AssertEqual len(g:neomake_test_jobfinished), 2
    AssertNeomakeMessage 'automake: buffer was not changed'
    w
    NeomakeTestsWaitForFinishedJobs
    AssertEqual len(g:neomake_test_jobfinished), 2
    AssertNeomakeMessage 'automake: buffer was not changed'

    bwipe
  endif

Execute (Automake stops previous jobs):
  if !has('timers')
    NeomakeTestsSkip 'Only with timers feature'
  else
    call g:NeomakeSetupAutocmdWrappers()
    call neomake#configure#automake({
    \ 'TextChanged': {'delay': 10}})
    new
    set filetype=neomake_tests
    let g:neomake_test_enabledmakers = [g:sleep_maker]
    doautocmd TextChanged
    let make_id = neomake#GetStatus().last_make_id
    NeomakeTestsWaitForMessage '\vautomake: callback for timer \d+'
    normal! ifoo
    doautocmd TextChanged
    NeomakeTestsWaitForFinishedJobs
    AssertNeomakeMessage '\vautomake: stopping previous make_ids: \[(\d+)\]'
    let make_id = g:neomake_test_matchlist[1]
    AssertEqual make_id + 1, neomake#GetStatus().last_make_id

    bwipe!
    au! neomake_automake
  endif

Execute (Automake for normal mode handles ciw):
  Save g:neomake
  call g:NeomakeSetupAutocmdWrappers()
  call neomake#configure#automake('n', 10)
  new
  if has('timers')
    AssertEqual g:neomake, {
    \ 'automake_events': {'InsertLeave': {}, 'TextChanged': {}},
    \ 'automake_delay': 10}
  else
    AssertEqual g:neomake, {
    \ 'automake_events': {'InsertLeave': {}, 'CursorHold': {}},
    \ 'automake_delay': 0}
  endif
  set filetype=neomake_tests
  let g:neomake_test_enabledmakers = [g:sleep_maker]

  normal! ifoo
  if has('timers')
    NeomakeTestsWaitForNextMessage
  else
    doautocmd CursorHold
  endif
  AssertNeomakeMessage 'Running makers: sleep-maker (auto)'
  NeomakeTestsWaitForFinishedJobs
  AssertEqual len(g:neomake_test_finished), 1
  AssertEqual len(g:neomake_test_jobfinished), 1
  bwipe!
  au! neomake_automake

Execute (Timer callback ignores wiped buffer):
  if !has('timers')
    NeomakeTestsSkip 'only with timers feature'
  else
    new
    call neomake#configure#automake_for_buffer({'CursorHold': {'delay': 5}})
    doautocmd CursorHold
    AssertNeomakeMessage '\vautomake: started timer \(5ms\): (\d+)'
    let timer = g:neomake_test_matchlist[1]
    bwipe
    sleep 10m
    AssertNeomakeMessage 'automake: automake: cleaning timer for wiped buffer: '.timer
  endif

Execute (Timer callback ignores wiped buffer with noautocmd):
  if !has('timers')
    NeomakeTestsSkip 'only with timers feature'
  else
    new
    call neomake#configure#automake_for_buffer({'CursorHold': {'delay': 5}})
    doautocmd CursorHold
    AssertNeomakeMessage '\vautomake: started timer \(5ms\): (\d+)'
    let timer = g:neomake_test_matchlist[1]
    noautocmd bwipe
    sleep 10m
    AssertNeomakeMessage 'automake: buffer does not exist anymore for timer '.timer
  endif

Execute (Toggle commands):
  Save g:neomake, &verbose

  for verbose in [0, 1]
    tabnew
    let &verbose = verbose

    NeomakeToggle
    AssertEqual g:neomake, {'disabled': 1}
    AssertEqual neomake#config#get_with_source('disabled'), [1, 'global']

    NeomakeToggleTab
    AssertEqual g:neomake, {'disabled': 1}
    AssertEqual t:neomake, {'disabled': 1}
    AssertEqual neomake#config#get_with_source('disabled'), [1, 'tab']

    NeomakeToggleBuffer
    AssertEqual g:neomake, {'disabled': 1}
    AssertEqual t:neomake, {'disabled': 1}
    AssertEqual b:neomake, {'disabled': 1}
    AssertEqual neomake#config#get_with_source('disabled'), [1, 'buffer']

    NeomakeEnableBuffer
    AssertEqual g:neomake, {'disabled': 1}
    AssertEqual t:neomake, {'disabled': 1}
    AssertEqual b:neomake, {'disabled': 0}
    AssertEqual neomake#config#get_with_source('disabled'), [0, 'buffer']

    NeomakeToggleBuffer
    AssertEqual g:neomake, {'disabled': 1}
    AssertEqual t:neomake, {'disabled': 1}
    AssertEqual b:neomake, {'disabled': 1}
    AssertEqual neomake#config#get_with_source('disabled'), [1, 'buffer']

    NeomakeToggleBuffer
    AssertEqual g:neomake, {'disabled': 1}
    AssertEqual t:neomake, {'disabled': 1}
    AssertEqual b:neomake, {}
    AssertEqual neomake#config#get_with_source('disabled'), [1, 'tab']

    NeomakeEnableTab
    AssertEqual g:neomake, {'disabled': 1}
    AssertEqual t:neomake, {'disabled': 0}
    AssertEqual b:neomake, {}
    AssertEqual neomake#config#get_with_source('disabled'), [0, 'tab']

    NeomakeToggleTab
    AssertEqual g:neomake, {'disabled': 1}
    AssertEqual t:neomake, {'disabled': 1}
    AssertEqual b:neomake, {}
    AssertEqual neomake#config#get_with_source('disabled'), [1, 'tab']

    NeomakeToggleTab
    AssertEqual g:neomake, {'disabled': 1}
    AssertEqual t:neomake, {}
    AssertEqual b:neomake, {}
    AssertEqual neomake#config#get_with_source('disabled'), [1, 'global']

    NeomakeEnable
    AssertEqual g:neomake, {'disabled': 0}
    AssertEqual t:neomake, {}
    AssertEqual b:neomake, {}
    AssertEqual neomake#config#get_with_source('disabled'), [0, 'global']

    NeomakeToggle
    AssertEqual g:neomake, {'disabled': 1}
    AssertEqual t:neomake, {}
    AssertEqual b:neomake, {}
    AssertEqual neomake#config#get_with_source('disabled'), [1, 'global']

    NeomakeToggle
    AssertEqual g:neomake, {}
    AssertEqual t:neomake, {}
    AssertEqual b:neomake, {}
    AssertEqual neomake#config#get_with_source('disabled'),
    \ [g:neomake#config#undefined, 'default']
    bwipe
  endfor

"
" Execute (end):
"   Assert 0
